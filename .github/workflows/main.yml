name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infrastructure/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  backend:
    name: 'Backend Build'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: zip -r function.zip handler.py

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: backend/function.zip
        retention-days: 1

  frontend:
    name: 'Frontend Build'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Build with Tailwind CSS
      run: npm run build

    - name: Copy build artifacts
      run: mkdir dist && cp -r src/* dist/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifact
        path: frontend/dist
        retention-days: 1

  deploy:
    name: 'Infrastructure Deploy'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./infrastructure

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifact
        path: frontend

    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-artifact
        path: backend

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.10.3"

    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init

    - name: Terraform Format
      working-directory: ./infrastructure
      run: terraform fmt -check

    - name: Create terraform.tfvars
      working-directory: ./infrastructure
      run: |
        echo 'aws_region = "${{ secrets.AWS_REGION }}"' > terraform.tfvars
        echo 'project_name = "${{ vars.PROJECT_NAME }}"' >> terraform.tfvars
        echo 'environment = "${{ vars.ENVIRONMENT }}"' >> terraform.tfvars
        echo 'domain_name = "${{ vars.DOMAIN_NAME }}"' >> terraform.tfvars
        echo 'cert_arn = "${{ secrets.CERT_ARN }}"' >> terraform.tfvars

    - name: Terraform Plan
      working-directory: ./infrastructure
      run: terraform plan -input=false
      
    - name: Terraform Apply
      working-directory: ./infrastructure
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false

    - name: Upload frontend to S3
      if: success()
      working-directory: ./frontend
      run: |
        aws s3 sync . s3://${{ secrets.S3_BUCKET }} \
          --exclude "*" \
          --include "index.html" \
          --include "styles/*" \
          --include "scripts/*" \
          --delete
